mads 2.0.6 build 58 (28 Jan 17)
Source: C:\jac\wudsn\Workspace\Atari800\Edventures in Programming\Rogue Runner\Rogue Runner.asm
     1 				; Following the Edventure Assembler tutorial
     2 				; to program a Roguelike game on the Atari 8bit
     3 				; Episode 8 Characters to Tiles
     4
     5 					org $2000	
     6
     7 = 4000			screen  = $4000  ; Screen buffer
     8 = 5000			charset = $5000  ; Character Set
     9 = 6000			pmg     = $6000  ; Player Missile Data
    10
    11 FFFF> 2000-2044> 20 1A + 	setup_screen()
    12 2003 20 54 55			setup_colours()	
    13 					;load_gfx()
    14 2006 A9 50 8D F4 02		mva #>charset CHBAS
    15 200B 20 82 55			clear_pmg()
    16 200E 20 99 55			load_pmg()
    17 2011 20 BF 55			setup_pmg()
    18 2014 20 FC 55			display_map()
    19 					
    20 2017 4C 17 20			jmp *
    21 					
    22 201A				icl 'hardware.asm'
Source: C:\jac\wudsn\Workspace\Atari800\Edventures in Programming\Rogue Runner\hardware.asm
     1 = 0230			SDLSTL = $0230  ; Display list starting address
     2 = 02F4			CHBAS  = $02f4  ; Character Base Register
     3 = 02C4			COLOR0 = $02c4  ; Colour for %01
     4 = 02C5			COLOR1 = $02c5  ; Colour for %10
     5 = 02C6			COLOR2 = $02c6  ; Colour for %11 (normal)
     6 = 02C7			COLOR3 = $02c7  ; Colour for %11 (inverse)
     7 = 02C8			COLOR4 = $02c8  ; Colour for %00 (background)
     8
     9 				;HPOSM0 = $D004 ; Horizontal position of missile 0
    10 				;HPOSM1 = $D005 ; Horizontal position of missile 1
    11 				;HPOSM2 = $D006 ; Horizontal position of missile 2
    12 				;HPOSM3 = $D007 ; Horizontal position of missile 3
    13 				;SIZEP0 = $D008 ; Size (width) of player 0 (0-3)
    14 				;SIZEP1 = $D009 ; Size (width) of player 1 (0-3)
    15 				;SIZEP2 = $D010 ; Size (width) of player 2 (0-3)
    16 				;SIZEP3 = $D011 ; Size (width) of player 3 (0-3)
    17 				;SIZEM = $D00C  ; Size of all missiles
    18 				;COLPF0 = $D016 ; Colour of playfield 0
    19 				;COLPF1 = $D017 ; Colour of playfield 1
    20 				;COLPF2 = $D018 ; Colour of playfield 2
    21 				;COLPF3 = $D019 ; Colour of playfield 3 / Player 4
    22 				;COLBK = $D01A  ; Colour of background
    23 				;PRIOR = $D01B  ; Priority order - which players are on top - bit 4=1 (enable player 4)
    24 = 02C0			PCOLR0 = $2C0   ; Colour for Player-Missile 0
    25 = 02C1			PCOLR1 = $2C1   ; Colour for Player-Missile 1
    26 = 02C2			PCOLR2 = $2C2   ; Colour for Player-Missile 2
    27 = 02C3			PCOLR3 = $2C3   ; Colour for Player-Missile 3
    28 				;
    29 				;MEMTOP = $2E5  ; 741
    30 				;RAMTOP = $6A   ; 106
    31
    32 = D01D			GRACTL = $D01D  ; Enable/disable PMG
    33 = D407			PMBASE = $D407  ; Player Missile Graphics Base address
    34 = 026F			GRPRIOR = $26F  ; Player-Missile Priority
    35 = 022F			SDMCTL = $22F   ; PM Resolution 46 ($2E) = double line resolution
    36 = D000			HPOSP0 = $D000  ; Horizontal position of player 0
    37 = D001			HPOSP1 = $D001  ; Horizontal position of player 1
    38 = D002			HPOSP2 = $D002  ; Horizontal position of player 2
    39 = D003			HPOSP3 = $D003  ; Horizontal position of player 3
    40 = D004			HPOSM0 = $D004 ; Horizontal position of missile 0
    41 = D005			HPOSM1 = $D005 ; Horizontal position of missile 1
    42 = D006			HPOSM2 = $D006 ; Horizontal position of missile 2
    43 = D007			HPOSM3 = $D007 ; Horizontal position of missile 3
    23 201A				icl 'dlist.asm'
Source: C:\jac\wudsn\Workspace\Atari800\Edventures in Programming\Rogue Runner\dlist.asm
     1 				* --------------------------------------- *
     2 				* Proc: setup_screen                      *
     3 				* Sets up the display list for the screen *
     4 				* --------------------------------------- *
     5 201A			.proc setup_screen
     6 = 0070			blank8 = $70    ; 8 blank lines
     7 = 0040			lms = $40       ; Load Memory Scan
     8 = 0041			jvb = $41       ; Jump while vertical blank
     9
    10 = 0002			antic2 = 2      ; Antic mode 2
    11 = 0004			antic4 = 4      ; Antic mode 4
    12 = 0005			antic5 = 5      ; Antic mode 5
    13
    14 201A A9 25 8D 30 02 A9 + 	mwa #dlist SDLSTL
    15 2024 60				rts
    16
    17 2025			dlist
    18 2025 70 70 70			.byte blank8, blank8, blank8
    19 2028 44 00 40			.byte antic4 + lms, <screen, >screen
    20 202B 04 04 04 04 04 04		.byte antic4, antic4, antic4, antic4, antic4, antic4
    21 2031 04 04 04 04 04 04		.byte antic4, antic4, antic4, antic4, antic4, antic4	
    22 2037 04 04 04 04 04 04		.byte antic4, antic4, antic4, antic4, antic4, antic4
    23 203D 04 04 04 04 04		.byte antic4, antic4, antic4, antic4, antic4
    24 2042 41 25 20			.byte jvb, <dlist, >dlist
    25 					.endp
    26 					
    24 2045				icl 'gfx.asm'
Source: C:\jac\wudsn\Workspace\Atari800\Edventures in Programming\Rogue Runner\gfx.asm
     1 2045				org charset
     2 5000-5A0B> 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00 ; 0
     3 5008 55 55 55 55 55 55 + 	.byte $55, $55, $55, $55, $55, $55, $55, $55 ; 1
     4 5010 AA AA AA AA AA AA + 	.byte $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA ; 2
     5 5018 FF FF FF FF FF FF + 	.byte $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF ; 3
     6 5020 00 A9 69 69 69 95 + 	.byte $00, $A9, $69, $69, $69, $95, $55, $00 ; 4
     7 5028 00 A9 A5 A5 A5 59 + 	.byte $00, $A9, $A5, $A5, $A5, $59, $55, $00 ; 5
     8 5030 A4 54 54 02 A2 52 + 	.byte $A4, $54, $54, $02, $A2, $52, $51, $00 ; 6
     9 5038 AA A5 15 80 4A 49 + 	.byte $AA, $A5, $15, $80, $4A, $49, $49, $00 ; 7
    10 5040 00 1A 1A 1A 1A 25 + 	.byte $00, $1A, $1A, $1A, $1A, $25, $15, $05 ; 8
    11 5048 00 A4 A4 A4 A4 58 + 	.byte $00, $A4, $A4, $A4, $A4, $58, $54, $50 ; 9
    12 5050 20 1A 19 09 20 1A + 	.byte $20, $1A, $19, $09, $20, $1A, $19, $09 ; 10
    13 5058 08 A4 54 50 08 A4 + 	.byte $08, $A4, $54, $50, $08, $A4, $54, $50 ; 11
    14 5060 00 2A 1A 1A 1A 25 + 	.byte $00, $2A, $1A, $1A, $1A, $25, $15, $15 ; 12
    15 5068 00 A8 A4 A4 A4 58 + 	.byte $00, $A8, $A4, $A4, $A4, $58, $54, $54 ; 13
    16 5070 00 2A 1A 1A 1A 25 + 	.byte $00, $2A, $1A, $1A, $1A, $25, $15, $05 ; 14
    17 5078 00 A8 A6 A5 A5 59 + 	.byte $00, $A8, $A6, $A5, $A5, $59, $56, $50 ; 15
    18 5080 0A A9 59 50 0A A9 + 	.byte $0A, $A9, $59, $50, $0A, $A9, $59, $50 ; 16
    19 5088 00 2A 9A 5A 5A 65 + 	.byte $00, $2A, $9A, $5A, $5A, $65, $95, $05 ; 17
    20 5090 00 A8 A4 A4 A4 58 + 	.byte $00, $A8, $A4, $A4, $A4, $58, $54, $50 ; 18
    21 5098 A0 9A 99 09 A0 9A + 	.byte $A0, $9A, $99, $09, $A0, $9A, $99, $09 ; 19
    22 50A0 55 A9 A9 A9 A9 A9 + 	.byte $55, $A9, $A9, $A9, $A9, $A9, $A9, $A9 ; 20
    23 50A8 A9 A9 A9 A9 A9 55 + 	.byte $A9, $A9, $A9, $A9, $A9, $55, $A9, $A9 ; 21
    24 50B0 A9 55 6A 6A 6A 6A + 	.byte $A9, $55, $6A, $6A, $6A, $6A, $6A, $6A ; 22
    25 50B8 A9 A9 55 6A 6A 6A + 	.byte $A9, $A9, $55, $6A, $6A, $6A, $6A, $55 ; 23
    26 50C0 3F CF F3 FC FF FF + 	.byte $3F, $CF, $F3, $FC, $FF, $FF, $FF, $FF ; 24
    27 50C8 FF FF FF FF 3F CF + 	.byte $FF, $FF, $FF, $FF, $3F, $CF, $F3, $FC ; 25
    28 50D0 F3 CF 3F FF 3F CF + 	.byte $F3, $CF, $3F, $FF, $3F, $CF, $F3, $FC ; 26
    29 50D8 AA 5A 55 55 55 55 + 	.byte $AA, $5A, $55, $55, $55, $55, $55, $55 ; 27
    30 50E0 AA AA 56 56 56 56 + 	.byte $AA, $AA, $56, $56, $56, $56, $56, $56 ; 28
    31 50E8 56 56 56 56 56 56 + 	.byte $56, $56, $56, $56, $56, $56, $56, $55 ; 29
    32 50F0 00 0F 3F 3F 30 0F + 	.byte $00, $0F, $3F, $3F, $30, $0F, $3F, $3C ; 30
    33 50F8 00 F0 FC FC 0C F0 + 	.byte $00, $F0, $FC, $FC, $0C, $F0, $FC, $3C ; 31
    34 5100 1C 3F 3F 1F 3F 3F + 	.byte $1C, $3F, $3F, $1F, $3F, $3F, $3F, $00 ; 32
    35 5108 3C FC DC FC FC FC + 	.byte $3C, $FC, $DC, $FC, $FC, $FC, $FC, $00 ; 33
    36 5110 00 00 1D 3F 3F 3F + 	.byte $00, $00, $1D, $3F, $3F, $3F, $3C, $3C ; 34
    37 5118 00 00 3C 00 CF CF + 	.byte $00, $00, $3C, $00, $CF, $CF, $CF, $CF ; 35
    38 5120 3C 3C 3F 3D 3F 3F + 	.byte $3C, $3C, $3F, $3D, $3F, $3F, $3F, $00 ; 36
    39 5128 CF CF CF CF CF 00 + 	.byte $CF, $CF, $CF, $CF, $CF, $00, $3C, $00 ; 37
    40 5130 00 00 1F 20 2F 2F + 	.byte $00, $00, $1F, $20, $2F, $2F, $20, $2F ; 38
    41 5138 00 00 F4 08 F8 F8 + 	.byte $00, $00, $F4, $08, $F8, $F8, $08, $F8 ; 39
    42 5140 2F 12 19 14 1D 1F + 	.byte $2F, $12, $19, $14, $1D, $1F, $1F, $00 ; 40
    43 5148 F8 84 64 14 74 F4 + 	.byte $F8, $84, $64, $14, $74, $F4, $F4, $00 ; 41
    44 5150 00 2F 11 19 14 2D + 	.byte $00, $2F, $11, $19, $14, $2D, $2F, $2F ; 42
    45 5158 00 F8 44 64 14 78 + 	.byte $00, $F8, $44, $64, $14, $78, $F8, $F8 ; 43
    46 5160 20 20 15 15 1F 1F + 	.byte $20, $20, $15, $15, $1F, $1F, $1F, $00 ; 44
    47 5168 08 08 54 54 F4 F4 + 	.byte $08, $08, $54, $54, $F4, $F4, $F4, $00 ; 45
    48 5170 AA 55 65 75 75 76 + 	.byte $AA, $55, $65, $75, $75, $76, $47, $57 ; 46
    49 5178 AA 56 66 76 76 76 + 	.byte $AA, $56, $66, $76, $76, $76, $46, $56 ; 47
    50 5180 67 74 75 75 45 55 + 	.byte $67, $74, $75, $75, $45, $55, $55, $55 ; 48
    51 5188 66 76 76 76 46 56 + 	.byte $66, $76, $76, $76, $46, $56, $56, $56 ; 49
    52 5190 AA 55 55 55 45 45 + 	.byte $AA, $55, $55, $55, $45, $45, $65, $54 ; 50
    53 5198 AA 56 56 56 46 46 + 	.byte $AA, $56, $56, $56, $46, $46, $66, $56 ; 51
    54 51A0 54 56 45 45 65 55 + 	.byte $54, $56, $45, $45, $65, $55, $55, $55 ; 52
    55 51A8 56 56 46 46 66 56 + 	.byte $56, $56, $46, $46, $66, $56, $56, $56 ; 53
    56 51B0 40 62 64 66 66 66 + 	.byte $40, $62, $64, $66, $66, $66, $66, $26 ; 54
    57 51B8 00 64 98 24 48 60 + 	.byte $00, $64, $98, $24, $48, $60, $64, $64 ; 55
    58 51C0 46 52 54 55 55 55 + 	.byte $46, $52, $54, $55, $55, $55, $55, $00 ; 56
    59 51C8 64 64 64 24 44 50 + 	.byte $64, $64, $64, $24, $44, $50, $54, $00 ; 57
    60 51D0 00 55 00 00 00 01 + 	.byte $00, $55, $00, $00, $00, $01, $09, $19 ; 58
    61 51D8 00 55 09 19 99 99 + 	.byte $00, $55, $09, $19, $99, $99, $99, $99 ; 59
    62 51E0 19 19 19 19 19 00 + 	.byte $19, $19, $19, $19, $19, $00, $55, $00 ; 60
    63 51E8 99 99 99 99 99 01 + 	.byte $99, $99, $99, $99, $99, $01, $55, $00 ; 61
    64 51F0 00 A9 A9 80 80 05 + 	.byte $00, $A9, $A9, $80, $80, $05, $05, $15 ; 62
    65 51F8 AA 56 56 52 40 44 + 	.byte $AA, $56, $56, $52, $40, $44, $45, $41 ; 63
    66 5200 15 15 10 10 14 14 + 	.byte $15, $15, $10, $10, $14, $14, $14, $04 ; 64
    67 5208 00 AA AA 02 02 50 + 	.byte $00, $AA, $AA, $02, $02, $50, $50, $54 ; 65
    68 5210 00 6A 69 69 69 56 + 	.byte $00, $6A, $69, $69, $69, $56, $55, $00 ; 66
    69 5218 54 54 04 04 14 14 + 	.byte $54, $54, $04, $04, $14, $14, $14, $10 ; 67
    70 5220 AA 95 95 85 01 11 + 	.byte $AA, $95, $95, $85, $01, $11, $51, $41 ; 68
    71 5228 A0 40 45 45 45 45 + 	.byte $A0, $40, $45, $45, $45, $45, $40, $50 ; 69
    72 5230 40 14 01 45 40 12 + 	.byte $40, $14, $01, $45, $40, $12, $55, $16 ; 70
    73 5238 A8 58 58 58 58 58 + 	.byte $A8, $58, $58, $58, $58, $58, $58, $50 ; 71
    74 5240 05 42 6A 29 49 59 + 	.byte $05, $42, $6A, $29, $49, $59, $19, $49 ; 72
    75 5248 01 14 40 51 01 44 + 	.byte $01, $14, $40, $51, $01, $44, $95, $54 ; 73
    76 5250 0A 01 51 51 51 51 + 	.byte $0A, $01, $51, $51, $51, $51, $01, $05 ; 74
    77 5258 90 41 A9 A8 61 65 + 	.byte $90, $41, $A9, $A8, $61, $65, $64, $61 ; 75
    78 5260 2A 25 25 25 25 25 + 	.byte $2A, $25, $25, $25, $25, $25, $25, $05 ; 76
    79 5268 01 60 85 81 84 84 + 	.byte $01, $60, $85, $81, $84, $84, $84, $84 ; 77
    80 5270 59 19 09 49 59 19 + 	.byte $59, $19, $09, $49, $59, $19, $49, $49 ; 78
    81 5278 84 84 A0 A8 AA 6A + 	.byte $84, $84, $A0, $A8, $AA, $6A, $1A, $05 ; 79
    82 5280 4A 4A 42 04 80 A8 + 	.byte $4A, $4A, $42, $04, $80, $A8, $AA, $55 ; 80
    83 5288 65 64 60 61 65 64 + 	.byte $65, $64, $60, $61, $65, $64, $61, $61 ; 81
    84 5290 40 09 52 42 12 12 + 	.byte $40, $09, $52, $42, $12, $12, $12, $12 ; 82
    85 5298 61 A1 81 90 82 2A + 	.byte $61, $A1, $81, $90, $82, $2A, $AA, $55 ; 83
    86 52A0 12 12 0A 2A AA A9 + 	.byte $12, $12, $0A, $2A, $AA, $A9, $A4, $50 ; 84
    87 52A8 AA A8 80 8F 4F 4F + 	.byte $AA, $A8, $80, $8F, $4F, $4F, $00, $8F ; 85
    88 52B0 AA 96 96 80 AA 96 + 	.byte $AA, $96, $96, $80, $AA, $96, $96, $40 ; 86
    89 52B8 4F 4F 0F 87 41 47 + 	.byte $4F, $4F, $0F, $87, $41, $47, $0F, $8F ; 87
    90 52C0 4F 4F 00 2A 2A 2A + 	.byte $4F, $4F, $00, $2A, $2A, $2A, $25, $25 ; 88
    91 52C8 80 0F FF FF F0 0F + 	.byte $80, $0F, $FF, $FF, $F0, $0F, $FF, $FF ; 89
    92 52D0 3F FF FF C0 3F FF + 	.byte $3F, $FF, $FF, $C0, $3F, $FF, $FF, $FF ; 90
    93 52D8 FF FF FF FF 5F FF + 	.byte $FF, $FF, $FF, $FF, $5F, $FF, $FF, $FF ; 91
    94 52E0 DF 47 77 13 CF FF + 	.byte $DF, $47, $77, $13, $CF, $FF, $FF, $FF ; 92
    95 52E8 FF FF 00 A9 A9 A6 + 	.byte $FF, $FF, $00, $A9, $A9, $A6, $51, $51 ; 93
    96 52F0 FF FF 00 AA AA AA + 	.byte $FF, $FF, $00, $AA, $AA, $AA, $55, $55 ; 94
    97 52F8 FC FF FF 03 FC FF + 	.byte $FC, $FF, $FF, $03, $FC, $FF, $FF, $FF ; 95
    98 5300 02 F0 FF FF 0F F0 + 	.byte $02, $F0, $FF, $FF, $0F, $F0, $FF, $FF ; 96
    99 5308 FF FF FF FF F5 FF + 	.byte $FF, $FF, $FF, $FF, $F5, $FF, $FF, $FF ; 97
   100 5310 F7 D1 DD C4 F3 FF + 	.byte $F7, $D1, $DD, $C4, $F3, $FF, $FF, $FF ; 98
   101 5318 FF FF 00 6A 6A 9A + 	.byte $FF, $FF, $00, $6A, $6A, $9A, $45, $45 ; 99
   102 5320 AA 2A 02 F2 F1 F1 + 	.byte $AA, $2A, $02, $F2, $F1, $F1, $00, $F2 ; 100
   103 5328 F1 F1 F0 D2 41 D1 + 	.byte $F1, $F1, $F0, $D2, $41, $D1, $F0, $F2 ; 101
   104 5330 AA 96 96 02 AA 96 + 	.byte $AA, $96, $96, $02, $AA, $96, $96, $01 ; 102
   105 5338 F1 F1 00 A8 A8 A8 + 	.byte $F1, $F1, $00, $A8, $A8, $A8, $58, $58 ; 103
   106 5340 00 00 3F 3F 30 30 + 	.byte $00, $00, $3F, $3F, $30, $30, $30, $30 ; 104
   107 5348 00 00 FC FC 0C 0C + 	.byte $00, $00, $FC, $FC, $0C, $0C, $0C, $0C ; 105
   108 5350 30 30 30 30 3F 3F + 	.byte $30, $30, $30, $30, $3F, $3F, $00, $00 ; 106
   109 5358 0C 0C 0C 0C FC FC + 	.byte $0C, $0C, $0C, $0C, $FC, $FC, $00, $00 ; 107
   110 5360 00 00 FF FF 00 00 + 	.byte $00, $00, $FF, $FF, $00, $00, $00, $00 ; 108
   111 5368 00 00 00 00 FF FF + 	.byte $00, $00, $00, $00, $FF, $FF, $00, $00 ; 109
   112 5370 30 30 30 30 30 30 + 	.byte $30, $30, $30, $30, $30, $30, $30, $30 ; 110
   113 5378 0C 0C 0C 0C 0C 0C + 	.byte $0C, $0C, $0C, $0C, $0C, $0C, $0C, $0C ; 111
   114 5380 30 30 F0 F0 00 00 + 	.byte $30, $30, $F0, $F0, $00, $00, $00, $00 ; 112
   115 5388 0C 0C 0F 0F 00 00 + 	.byte $0C, $0C, $0F, $0F, $00, $00, $00, $00 ; 113
   116 5390 00 00 00 00 F0 F0 + 	.byte $00, $00, $00, $00, $F0, $F0, $30, $30 ; 114
   117 5398 00 00 00 00 0F 0F + 	.byte $00, $00, $00, $00, $0F, $0F, $0C, $0C ; 115
   118 53A0 00 A9 69 69 69 80 + 	.byte $00, $A9, $69, $69, $69, $80, $B3, $3D ; 116
   119 53A8 00 A9 A5 A5 A5 09 + 	.byte $00, $A9, $A5, $A5, $A5, $09, $31, $F0 ; 117
   120 53B0 B6 B6 9D 3F BC B1 + 	.byte $B6, $B6, $9D, $3F, $BC, $B1, $45, $00 ; 118
   121 53B8 72 71 D1 F0 F2 B1 + 	.byte $72, $71, $D1, $F0, $F2, $B1, $61, $00 ; 119
   122 53C0 02 AA 66 59 64 90 + 	.byte $02, $AA, $66, $59, $64, $90, $84, $14 ; 120
   123 53C8 00 A5 25 85 61 18 + 	.byte $00, $A5, $25, $85, $61, $18, $48, $50 ; 121
   124 53D0 90 84 14 90 85 6A + 	.byte $90, $84, $14, $90, $85, $6A, $95, $40 ; 122
   125 53D8 18 48 50 18 48 A4 + 	.byte $18, $48, $50, $18, $48, $A4, $58, $04 ; 123
   126 53E0 00 55 3F 50 6F 3F + 	.byte $00, $55, $3F, $50, $6F, $3F, $00, $3F ; 124
   127 53E8 00 55 FD 01 FD FD + 	.byte $00, $55, $FD, $01, $FD, $FD, $11, $79 ; 125
   128 53F0 3F 00 3F 5F 60 3F + 	.byte $3F, $00, $3F, $5F, $60, $3F, $55, $00 ; 126
   129 53F8 79 21 FD FD 01 FD + 	.byte $79, $21, $FD, $FD, $01, $FD, $55, $00 ; 127
   130
    25 5400				icl 'pmgdata.asm'
Source: C:\jac\wudsn\Workspace\Atari800\Edventures in Programming\Rogue Runner\pmgdata.asm
     1 5400			pmgdata
     2
     3 				; PCOLR0 (Brown)
     4 				;.byte $48, $12, $A0, $00, $00, $20, $BA, $92, $D6, $D6, $7C, $BA, $92, $C6, $28, $00
     5 				; PCOLR1 (Blue)
     6 				;.byte $00, $00, $00, $00, $00, $00, $00, $00, $D6, $54, $BA, $C6, $FE, $BA, $44, $00
     7 				; PCOLR2 (Black)
     8 				;.byte $04, $4C, $5A, $FA, $F6, $DE, $44, $6C, $28, $28, $00, $00, $00, $00, $00, $6C
     9 				; PCOLR3 (White)
    10 				;.byte $04, $4C, $5E, $FE, $FE, $DE, $44, $44, $00, $00, $00, $00, $00, $00, $00, $00
    11 					
    12 				; missiles
    13 5400 00 00 00 00 00 00 + .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10, $30, $70, $70, $E0, $C0, $C6, $87, $8B, $8B, $4A, $0B, $03, $0F, $0E, $10, $31, $33, $73, $76, $7C, $6C, $28, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    14 				; player0
    15 5444 00 00 00 00 00 00 + .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $20, $3C, $7C, $FE, $F3, $E1, $41, $43, $43, $43, $C7, $86, $BC, $BC, $98, $C0, $E0, $A0, $B0, $90, $18, $08, $0C, $0C, $0E, $06, $07, $03, $03, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $07, $04, $04, $04, $04
    16 				; player1
    17 5488 01 01 01 05 05 05 + .byte $01, $01, $01, $05, $05, $05, $05, $05, $05, $05, $0D, $09, $19, $31, $F1, $E1, $C1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10, $1C, $1E, $3A, $32, $22, $62, $62, $46, $44, $45, $45, $45, $4D, $69, $78, $18, $C0, $C0, $C0, $C0, $80, $00, $00, $00, $00, $00, $00, $30, $19, $1F, $0F, $07, $00, $00, $00, $57, $55, $55, $55, $75
    18 				; player2
    19 54CC 80 80 80 A0 A0 A0 + .byte $80, $80, $80, $A0, $A0, $A0, $A0, $A0, $A0, $A0, $B0, $90, $98, $8C, $8F, $87, $83, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $1C, $1C, $34, $64, $CC, $CC, $8C, $9C, $9D, $99, $19, $29, $A9, $E9, $C9, $D8, $18, $18, $10, $10, $30, $30, $30, $20, $60, $60, $E0, $C0, $C0, $C0, $80, $00, $00, $00, $00, $77, $55, $57, $54, $57
    20 				; player3
    21 5510 00 00 00 00 00 00 + .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $44, $C4, $CC, $CC, $CC, $8D, $99, $99, $99, $B9, $39, $29, $69, $C9, $C9, $88, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $70, $40, $40, $40, $40
    26 					
    27 				* --------------------------------------- *
    28 				* Proc: setup_colours                     *
    29 				* Sets up colours                         *
    30 				* --------------------------------------- *
    31 5554			.proc setup_colours
    32 = 0006			med_gray = $06
    33 = 000A			lt_gray = $0A
    34 = 00C2			sap_green = $C2
    35 = 00F2			dark_sienna = $F2
    36 = 0000			midnight_black = $00
    37 = 0074			phthalo_blue = $74
    38 = 00E0			mountain_mx = $E0
    39 = 000D			titanium_white = $0D
    40 = 00F8			vandyke_brown = $F8
    41 = 0092			title_colour = $92
    42
    43 					; Character Set Colours
    44 5554 A9 06 8D C4 02		mva #med_gray COLOR0        ; %01
    45 5559 A9 0A 8D C5 02		mva #lt_gray COLOR1         ; %10
    46 555E A9 F2 8D C6 02		mva #dark_sienna COLOR2     ; %11
    47 5563 A9 C2 8D C7 02		mva #sap_green COLOR3       ; %11 (inverse)
    48 5568 A9 00 8D C8 02		mva #midnight_black COLOR4  ; %00
    49
    50 					; Player-Missile Colours
    51 556D A9 92 8D C0 02		mva #title_colour PCOLR0
    52 5572 A9 92 8D C1 02		mva #title_colour PCOLR1
    53 5577 A9 92 8D C2 02		mva #title_colour PCOLR2	
    54 557C A9 92 8D C3 02		mva #title_colour PCOLR3
    55 					
    56 5581 60				rts
    57 					.endp
    58 					
    59 				* --------------------------------------- *
    60 				* Proc: clear_pmg                         *
    61 				* Clears memory for Player-Missile GFX    *
    62 				* --------------------------------------- *
    63 5582			.proc clear_pmg
    64 = 6300			pmg_m4 = pmg + $300
    65 = 6400			pmg_p0 = pmg + $400
    66 = 6500			pmg_p1 = pmg + $500
    67 = 6600			pmg_p2 = pmg + $600
    68 = 6700			pmg_p3 = pmg + $700	
    69 					
    70 5582 A2 F0			ldx #$F0
    71 5584 A9 00			lda #0
    72 					
    73 5586			loop
    74 5586 9D 00 63			sta pmg_m4,x
    75 5589 9D 00 64			sta pmg_p0,x
    76 558C 9D 00 65			sta pmg_p1,x
    77 558F 9D 00 66			sta pmg_p2,x
    78 5592 9D 00 67			sta pmg_p3,x
    79 5595 CA				dex
    80 5596 D0 EE			bne loop
    81 5598 60				rts
    82 					.endp
    83
    84 				* --------------------------------------- *
    85 				* Proc: load_pmg                          *
    86 				* Load PMG Graphics                       *
    87 				* --------------------------------------- *
    88 5599			.proc load_pmg
    89 = 6300			pmg_m4 = pmg + $300
    90 = 6400			pmg_p0 = pmg + $400
    91 = 6500			pmg_p1 = pmg + $500
    92 = 6600			pmg_p2 = pmg + $600
    93 = 6700			pmg_p3 = pmg + $700	
    94 					
    95 5599 A2 00			ldx #0
    96 559B			loop
    97 559B BD 00 54 9D 46 63		mva pmgdata,x pmg_m4+70,x
    98 55A1 BD 44 54 9D 46 64		mva pmgdata+68,x pmg_p0+70,x
    99 55A7 BD 88 54 9D 46 65		mva pmgdata+136,x pmg_p1+70,x
   100 55AD BD CC 54 9D 46 66		mva pmgdata+204,x pmg_p2+70,x
   101 55B3 BD 10 55 9D 46 67		mva pmgdata+272,x pmg_p3+70,x
   102 55B9 E8				inx
   103 55BA E0 44			cpx #68
   104 55BC D0 DD			bne loop
   105 55BE 60				rts
   106 					.endp
   107 					
   108 				* --------------------------------------- *
   109 				* Proc: setup_pmg                         *
   110 				* Sets up Player-Missile Geaphics System  *
   111 				* --------------------------------------- *
   112 55BF			.proc setup_pmg
   113 55BF A9 60 8D 07 D4		mva #>pmg PMBASE
   114 55C4 A9 3E 8D 2F 02		mva #62 SDMCTL   ; Single Line resolution	
   115 55C9 A9 03 8D 1D D0		mva #3 GRACTL    ; Enable PMG
   116 55CE A9 21 8D 6F 02		mva #33 GRPRIOR   ; Give players priority and enables overlapping colors
   117 55D3 A9 6C			lda #108
   118 55D5 8D 07 D0			sta HPOSM3
   119 55D8 A9 6E			lda #110
   120 55DA 8D 06 D0			sta HPOSM2
   121 55DD A9 70			lda #112
   122 55DF 8D 00 D0			sta HPOSP0
   123 55E2 A9 78			lda #120
   124 55E4 8D 01 D0			sta HPOSP1
   125 55E7 A9 80			lda #128
   126 55E9 8D 02 D0			sta HPOSP2
   127 55EC A9 88			lda #136
   128 55EE 8D 03 D0			sta HPOSP3
   129 55F1 A9 90			lda #144
   130 55F3 8D 05 D0			sta HPOSM1
   131 55F6 A9 92			lda #146
   132 55F8 8D 04 D0			sta HPOSM0
   133 55FB 60				rts
   134 					.endp
   135
   136 				* --------------------------------------- *
   137 				* Proc: display_map                       *
   138 				* Displays the current map                *
   139 				* --------------------------------------- *
   140 55FC			.proc display_map
   141 55FC A0 00			ldy #0
   142 55FE			loop
   143 55FE B9 4C 56 99 00 40		mva map,y screen,y
   144 5604 B9 9C 56 99 50 40		mva map+80,y screen+80,y
   145 560A B9 EC 56 99 A0 40		mva map+160,y screen+160,y
   146 5610 B9 3C 57 99 F0 40		mva map+240,y screen+240,y
   147 5616 B9 8C 57 99 40 41		mva map+320,y screen+320,y
   148 561C B9 DC 57 99 90 41		mva map+400,y screen+400,y
   149 5622 B9 2C 58 99 E0 41		mva map+480,y screen+480,y
   150 5628 B9 7C 58 99 30 42		mva map+560,y screen+560,y
   151 562E B9 CC 58 99 80 42		mva map+640,y screen+640,y
   152 5634 B9 1C 59 99 D0 42		mva map+720,y screen+720,y
   153 563A B9 6C 59 99 20 43		mva map+800,y screen+800,y
   154 5640 B9 BC 59 99 70 43		mva map+880,y screen+880,y
   155
   156 5646 C8				iny
   157 5647 C0 50			cpy #80
   158 5649 D0 B3			bne loop
   159 564B 60				rts
   160
   161 564C			map
   162 564C 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,12,13,4,62,65,66,4,85,89,90,95,96,100,66,4,62,65,66,12,13,0,0,0,0,0,0,0,0,0,0
   163 5674 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,12,13,63,64,67,68,86,87,91,3,3,97,101,102,63,64,67,68,12,13,0,0,0,0,0,0,0,0,0,0
   164 569C 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,8,9,69,70,73,74,86,87,91,92,98,97,101,102,69,70,73,74,8,9,0,0,0,0,0,0,0,0,0,0
   165 56C4 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,10,11,71,72,75,76,86,88,93,94,94,99,103,102,71,72,75,76,10,11,0,0,0,0,0,0,0,0,0,0
   166 56EC 04 05 78 79 04 05 + 	.byte 4,5,120,121,4,5,244,245,4,5,10,11,77,78,81,82,232,236,236,236,236,236,236,233,77,78,81,82,10,11,4,5,244,245,4,5,120,121,4,5
   167 5714 06 07 7A 7B 06 07 + 	.byte 6,7,122,123,6,7,246,247,6,7,10,11,79,80,83,84,238,128,128,128,128,128,128,239,79,80,83,84,10,11,6,7,246,247,6,7,122,123,6,7
   168 573C 00 01 00 01 00 01 + 	.byte 0,1,0,1,0,1,0,1,0,1,0,1,0,1,232,236,240,128,0,0,0,0,128,241,236,233,0,1,0,1,0,1,0,1,0,1,0,1,0,1
   169 5764 01 00 01 00 01 00 + 	.byte 1,0,1,0,1,0,1,0,1,0,1,0,1,0,238,128,128,128,0,0,0,0,128,128,128,239,1,0,1,0,1,0,1,0,1,0,1,0,1,0
   170 578C EC EC EC EC EC EC + 	.byte 236,236,236,236,236,236,236,236,236,236,236,236,236,236,240,128,0,0,0,0,0,0,0,0,128,241,236,236,236,236,236,236,236,236,236,236,236,236,236,236
   171 57B4 ED ED ED ED ED ED + 	.byte 237,237,237,237,237,237,242,243,237,237,237,237,237,237,242,128,0,0,0,0,0,0,0,0,128,243,237,237,237,237,237,237,242,243,237,237,237,237,237,237
   172 57DC 00 01 00 01 00 01 + 	.byte 0,1,0,1,0,1,238,239,0,1,0,1,0,1,238,128,128,128,0,0,0,0,128,128,128,239,0,1,0,1,0,1,238,239,0,1,0,1,0,1
   173 5804 01 00 01 00 01 00 + 	.byte 1,0,1,0,1,0,238,239,1,0,1,0,1,0,234,237,242,128,0,0,0,0,128,243,237,235,1,0,1,0,1,0,238,239,1,0,1,0,1,0
   174 582C 0C 0D 04 05 04 05 + 	.byte 12,13,4,5,4,5,30,31,4,5,4,5,12,13,0,1,238,128,128,128,128,128,128,239,0,1,12,13,4,5,4,5,238,239,4,5,4,5,12,13
   175 5854 0C 0D 06 07 06 07 + 	.byte 12,13,6,7,6,7,32,33,6,7,6,7,12,13,1,0,234,237,237,237,237,237,237,235,1,0,12,13,6,7,6,7,234,235,6,7,6,7,12,13
   176 587C 0C 0D 18 19 18 19 + 	.byte 12,13,24,25,24,25,24,25,24,25,24,25,14,15,12,13,4,5,4,5,4,5,4,5,12,13,17,18,54,55,27,28,27,28,27,28,58,59,12,13
   177 58A4 0C 0D 18 1A 18 1A + 	.byte 12,13,24,26,24,26,24,26,24,26,24,26,10,16,12,13,6,7,6,7,6,7,6,7,12,13,19,11,56,57,1,29,1,29,1,29,60,61,12,13
   178 58CC 0C 0D 18 19 36 37 + 	.byte 12,13,24,25,54,55,24,25,24,25,38,39,24,25,12,13,20,21,20,21,20,21,20,21,8,9,27,28,46,47,50,51,46,47,50,51,46,47,12,13
   179 58F4 0C 0D 18 1A 38 39 + 	.byte 12,13,24,26,56,57,24,26,24,26,40,41,24,26,12,13,22,23,22,23,22,23,22,23,10,11,1,29,48,49,52,53,48,49,52,53,48,49,12,13
   180 591C 0C 0D 18 19 18 19 + 	.byte 12,13,24,25,24,25,24,25,58,59,24,25,24,25,34,35,20,21,20,21,42,43,20,21,20,21,27,28,50,51,46,47,124,125,46,47,38,39,12,13
   181 5944 0C 0D 18 1A 18 1A + 	.byte 12,13,24,26,24,26,24,26,60,61,24,26,24,26,36,37,22,23,22,23,44,45,22,23,22,23,1,29,52,53,48,49,126,127,48,49,40,41,12,13
   182 596C 08 09 04 05 0C 0D + 	.byte 8,9,4,5,12,13,24,25,24,25,24,25,24,25,12,13,20,21,20,21,20,21,20,21,12,13,27,28,46,47,50,51,46,47,12,13,4,5,8,9
   183 5994 0A 0B 06 07 0C 0D + 	.byte 10,11,6,7,12,13,24,26,24,26,24,26,24,26,12,13,22,23,22,23,22,23,22,23,12,13,1,29,48,49,52,53,48,49,12,13,6,7,10,11
   184 59BC 00 00 00 00 08 09 + 	.byte 0,0,0,0,8,9,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,8,9,0,0,0,0
   185 59E4 00 00 00 00 0A 0B + 	.byte 0,0,0,0,10,11,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,10,11,0,0,0,0
   186
   187
   188
   189
   190
   191
   192
   193
   194
   195 					
   196
   197 					.endp
   198
   199 					
